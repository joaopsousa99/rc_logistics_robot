<?xml version="1.0"?>
<launch>
  <!-- Argumentos -->
  <!-- <arg name="model" default="waffle" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="x_pos" default="0"/>
  <arg name="y_pos" default="0"/>
  <arg name="z_pos" default="0"/>
  <arg name="joycon" default="false" doc="use joycon"/> -->


  <!-- Map Server -->
  <node pkg="map_server" type="map_server" name="map_server" args="$(find museum_guide)/maps/mapa_real2.yaml" output="screen"/>


  <!-- AMCL -->
  <include file="$(find museum_guide)/launch/amcl.launch">
    <arg name="initial_pose_x" default="0"/>
    <arg name="initial_pose_y" default="0"/>
    <arg name="initial_pose_a" default="0"/>
  </include>


 <!-- move_base -->
 <include file="$(find museum_guide)/launch/move_base_real.launch"/>

 <!-- Remapping for ZBAR -->
  <remap from="/webcam/image_raw" to="/image"/>
 <!-- launch video stream -->
   <include file="$(find video_stream_opencv)/launch/camera.launch" >
        <!-- node name and ros graph name -->
        <arg name="camera_name" value="webcam" />
        <!-- means video device 0, /dev/video0 -->
        <arg name="video_stream_provider" value="0" />
        <!-- set camera fps to (if the device allows) -->
        <arg name="set_camera_fps" value="30"/>
        <!-- set buffer queue size of frame capturing to -->
        <arg name="buffer_queue_size" value="100" />
        <!-- throttling the querying of frames to -->
        <arg name="fps" value="30" />
        <!-- setting frame_id -->
        <arg name="frame_id" value="webcam" />
        <!-- flip the image horizontally (mirror it) -->
        <arg name="flip_horizontal" value="false" />
        <!-- flip the image vertically -->
        <arg name="flip_vertical" value="false" />
        <!-- visualize on an image_view window the stream generated -->
        <arg name="visualize" value="false" />
   </include>

  <!-- RVIZ -->
  <node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(find museum_guide)/rviz/real.rviz"/>

  <!-- ZBAR -->
  <node pkg="zbar_ros" type="barcode_reader_node" name="barcode_reader">
        <param name="throttle_repeated_barcodes" type="double" value="2.0"/>
  </node>

  <!-- goals_node -->
  <node pkg="museum_guide" type="goals_node_real.py" name="movebase_client_py" output="screen" />

  <!--
  Guardar Mapa (Guarda an localização onde o comando é corrido)
  rosrun map_server map_saver -f teste1
  -->
</launch>